name: Publish PyPI Package

on:
  release:
    types: [published]
  repository_dispatch:
    types: [trigger_pypi_publish]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (for manual dispatch)'
        required: false
        default: ''

jobs:
  build-unity-plugin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install pybind11
        run: pip install pybind11

      - name: Compile C++ code
        working-directory: Assets/Plugins/TrafficSimulation
        run: |
          mkdir build && cd build
          cmake ..         
          make

      - name: Archive Plugin Files
        run: |
          tar -cvhf ./TrafficSimulation-Plugin.tar -C Assets/Plugins/TrafficSimulation/build .

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: ./TrafficSimulation-Plugin.tar
          include-hidden-files: true
          if-no-files-found: warn

  build-unity-project:
    needs: build-unity-plugin
    runs-on: macos-latest
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Determine version
        id: get_version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(date +"%Y%m%d-%H%M%S")
            fi
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Unity Project for macOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneOSX
          unityVersion: auto
          versioning: Semantic

      - name: Package Builds with metadata
        run: |
          echo "Version: ${{ steps.get_version.outputs.VERSION }}" > metadata.txt
          zip -r macos-unity-build-project-${{ steps.get_version.outputs.VERSION }}.zip ./Builds ./Logs metadata.txt

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-unity-build-project-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: macos-unity-build-project-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip
