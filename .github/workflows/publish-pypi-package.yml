name: Publish PyPI Package

on:
  release:
    types: [published]
  repository_dispatch:
    types: [trigger_pypi_publish]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (for manual dispatch)'
        required: false
        default: ''

jobs:
  build-unity-plugin:
    runs-on: macos-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Determine version
        id: get_version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ ${{ github.event_name }} == 'repository_dispatch' ]]; then
            VERSION="${{ github.event.client_payload.version }}"
          else
            VERSION=$(git describe --tags --always) # Use latest tag or commit hash
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Print version
        run: echo "Building Docker image for version ${{ steps.get_version.outputs.VERSION }}"

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install pybind11
        run: pip install pybind11

      - name: Compile C++ code
        working-directory: Assets/Plugins/TrafficSimulation
        run: |
          mkdir build && cd build
          cmake ..         
          make

      - name: Create metadata file
        run: |  
          echo "Version: ${{ steps.get_version.outputs.VERSION }}" > metadata.txt
          echo "Commit SHA: ${{ github.sha }}" >> metadata.txt
          echo "Short SHA: ${{ steps.slug.outputs.sha8 }}" >> metadata.txt

      - name: Archive Plugin Files
        run: |
          #tar -cvhf ./TrafficSimulation-Plugin.tar -C Assets/Plugins/TrafficSimulation/build .
          zip -r macos-unity-plugin-build-${{ steps.get_version.outputs.VERSION }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt

      - name: Upload Unity Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-unity-plugin-build-${{ steps.get_version.outputs.VERSION }}
          path: ./macos-unity-plugin-build-${{ steps.get_version.outputs.VERSION }}.zip
          include-hidden-files: true
          if-no-files-found: warn

  build-unity-project:
    needs: build-unity-plugin
    runs-on: macos-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Set workflow outputs
        run: echo "VERSION=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - name: Debug VERSION
        run: echo "VERSION is ${{ env.VERSION }}"

      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This is important to fetch all history for all tags and branches
          lfs: true
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Get version from previous job
        run: echo "VERSION=${{ needs.build-unity-plugin.outputs.VERSION }}" >> $GITHUB_ENV

      - name: Download Unity Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-unity-plugin-build-${{ env.VERSION }}
          path: ./

      - name: Extract Unity Plugin Build Artifacts
        run: |
          mkdir -p Assets/Plugins/TrafficSimulation/build/
          # Extract the file and overwrite existing files without prompting
          unzip -o ./macos-unity-plugin-build-${{ env.VERSION }}.zip -d ./Assets/Plugins/TrafficSimulation/build/
          rm -rf ./macos-unity-plugin-build-${{ env.VERSION }}.zip

      - name: Build Unity Project for macOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneOSX # Build a macOS standalone.
          unityVersion: auto # Use "auto" to get from your ProjectSettings/ProjectVersion.txt'
          versioning: Semantic
          # Enables caching the Unity Hub and Editor installation for MacOS runners (default: false).
          # This can significantly reduce project build times if you have enough available cache on Github Actions.
          cacheUnityInstallationOnMac: true
          buildName: libReplicantDriveSim-${{ steps.slug.outputs.sha8 }}
          buildsPath: ./Builds
          # Format: EditorNamespace.BuilderClassName.StaticBuildMethod
          buildMethod: UnityBuilderAction.BuildScript.PerformMacOSBuild
          projectPath: .
          customParameters:  '-buildTarget OSXArm64 -logFile "./Logs/unity_build.log" -development -debugCode'
          androidExportType: "none"
          androidSymbolType: "none"

      - name: Create metadata file
        run: |
          echo "Version: ${{ env.VERSION }}" > metadata.txt
          echo "Commit SHA: ${{ github.sha}}" >> metadata.txt
          echo "Short SHA: ${{ steps.slug.outputs.sha8 }}" >> metadata.txt

      - name: Package Builds with metadata
        run: |
          zip -r macOS-unity-Build-project-${{ env.VERSION }}.zip ./Builds ./Logs metadata.txt

      - name: Upload Unity Build Artifact
        uses: actions/upload-artifact@v4
        with:	
          name: macOS-unity-Build-project-${{ env.VERSION }}
          # Upload the entire Builds and Logs directories
          path: macOS-unity-Build-project-${{ env.VERSION }}.zip

      #- name: Upload Release Asset
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: ./macOS-unity-Build-project-${{ env.VERSION }}.zip
      #    asset_name: macOS-unity-Build-project-${{ env.VERSION }}.zip
      #    asset_content_type: application/zip

      - name: Update Release Asset
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
               tag: process.env.VERSION
            });

            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id: release.data.id,
              name: `macOS-unity-Build-project-${process.env.VERSION}.zip`,
              data: fs.readFileSync(`./macOS-unity-Build-project-${process.env.VERSION}.zip`)
            });


  build-and-publish-pypi:
    needs: build-unity-project
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    env:
      VERSION: v0.2.0 #${{ needs.build-unity-project.outputs.VERSION }}

    steps:
      - name: Set VERSION env var
        run: echo "VERSION=${{ needs.build-unity-project.outputs.VERSION }}" >> $GITHUB_ENV

      - name: Debug VERSION
        run: |
          echo "needs VERSION is ${{ needs.build-unity-project.outputs.VERSION }}"
          echo "env VERSION is ${{ env.VERSION }}"

      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref || github.ref }}

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-unity-Build-project-v0.2.0 #${{ env.VERSION }}
          path: ./replicantdrivesim

      - name: Extract Unity Build Artifact
        run: |
          # Extract the file and overwrite existing files without prompting
          unzip -o replicantdrivesim/macOS-unity-Build-project-v0.2.0.zip #${{ env.VERSION }}.zip
          rm replicantdrivesim/macOS-unity-Build-project-v0.2.0.zip #${{ env.VERSION }}.zip

      - name: Download Unity Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-unity-plugin-build-v0.2.0 #${{ env.VERSION }}
          path: ./

      - name: Extract Unity Plugin Artifact
        run: |
          # Create build directory
          #mkdir -p replicantdrivesim/build/
          # Extract the file and overwrite existing files without prompting
          unzip -o ./macos-unity-plugin-build-v0.2.0.zip #${{ env.VERSION }}.zip
          cp ./Assets/Plugins/TrafficSimulation/build/replicantdrivesim_pypi.so replicantdrivesim/replicantdrivesim.so
          # Remove tar archive
          rm -rf ./macos-unity-plugin-build-v0.2.0.zip #${{ env.VERSION }}.zip

      #- name: Copy and Rename Executable
      #  run: |
      #    # Copy and rename binary executable
      #    cp replicantdrivesim/build/replicantdrivesim_pypi.so replicantdrivesim/replicantdrivesim.so

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: pip install --upgrade setuptools wheel twine pybind11

      - name: Build Python package
        run: |
          # Build the Python wheel and source distribution
          python setup.py sdist bdist_wheel

      - name: Upload to PyPI to publish Python package
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Upload the package to PyPI
          twine upload dist/*

      - name: Verify PyPi package installation
        run: |
          pip install ReplicantDriveSim
          pip show ReplicantDriveSim
