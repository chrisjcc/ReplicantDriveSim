name: Publish Docker Image

on:
  release:
    types: [published]
  repository_dispatch:
    types: [trigger_docker_publish]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  DOCKER_NAMESPACE: chrisjcc
  DOCKER_REPOSITORY: replicantdrivesim

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Determine version
        id: get_version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(date +"%Y%m%d-%H%M%S") # Fallback to timestamp if no version is provided
            fi
          else
            VERSION=$(git rev-parse --short HEAD) # Use short commit hash for other cases
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Lowercase the repo name
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}} 

      - name: Checkout Git repository
        uses: actions/checkout@v4

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-unity-Build-project-${{ steps.get_version.outputs.VERSION }}
          path: ./

      - name: Extract Unity Build Artifact
        run: |
          unzip macos-unity-build-project-${{ steps.get_version.outputs.VERSION }}.zip
          rm macos-unity-build-project-${{ steps.get_version.outputs.VERSION }}.zip

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
