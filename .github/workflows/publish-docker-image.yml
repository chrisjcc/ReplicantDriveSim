name: Publish Docker Image

on:
  release:
    types: [published] # Triggers when a new release is published
  repository_dispatch:
    types: [trigger_docker_publish] # Triggers when the dispatch event is called
  workflow_run:
    workflows: ["Publish PyPI Package"] # Ensures the Docker workflow runs after the PyPI workflow is completed
    types:
      - completed # Only triggers when the PyPI workflow has successfully completed
  workflow_dispatch:  # Allows manual triggering for debugging
    inputs:
      run_id:
        description: 'Workflow run ID for artifact download (for manual dispatch)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  DOCKER_NAMESPACE: chrisjcc
  DOCKER_REPOSITORY: replicantdrivesim

jobs:
#  wait-for-unity-build:
#    runs-on: ubuntu-latest
#    id: wait-for-build
#    if: ${{ github.event_name == 'workflow_run' }}  # Only run this job for workflow_run events
#    steps:
#      - name: Wait for Unity Build Artifact
#        uses: fountainhead/action-wait-for-check@v1.2.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          checkName: Publish PyPI Package
#          #ref: ${{ github.event.client_payload.ref || github.ref }}
#          ref: ${{ github.sha }}  # Use the commit SHA instead
#          timeoutSeconds: 3600

#      - name: Do something with a passing build
#        if: steps.wait-for-build.outputs.conclusion == 'success'

#      - name: Do something with a failing build
#        if: steps.wait-for-build.outputs.conclusion == 'failure'

  build-and-push-docker-image:
    #needs: [wait-for-unity-build]
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    permissions:
      actions: read
      contents: read
      packages: write
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0 # Fetch all history including tags

      - name: Determine version and run ID
        id: get_info
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ ${{ github.event_name }} == 'repository_dispatch' ]]; then
            VERSION="${{ github.event.client_payload.version }}"
          elif [[ ${{ github.event_name }} == 'workflow_run' ]]; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION=$(git describe --tags --abbrev=0)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          if [[ ${{ github.event_name }} == 'workflow_run' ]]; then
            echo "RUN_ID=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            echo "RUN_ID=${{ github.event.inputs.run_id }}" >> $GITHUB_OUTPUT
          else
            echo "RUN_ID=" >> $GITHUB_OUTPUT
          fi

      - name: Print version and run ID
        run: |
          echo "Building Docker image for version ${{ steps.get_info.outputs.VERSION }}"
          echo "Using run ID: ${{ steps.get_info.outputs.RUN_ID }}"

      - name: Lowercase the repo name
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=raw,value=${{ steps.get_version.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}} 

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-unity-Build-project-${{ steps.get_version.outputs.VERSION }}
          path: ./
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get_info.outputs.RUN_ID }}

      - name: Extract Unity Build Artifact
        run: |
          # Extract the file and overwrite existing files without prompting
          unzip -o macOS-unity-Build-project-${{ steps.get_version.outputs.VERSION }}.zip

          # Remove the ZIP file
          rm -rf ./macOS-unity-Build-project-${{ steps.get_version.outputs.VERSION }}.zip

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
