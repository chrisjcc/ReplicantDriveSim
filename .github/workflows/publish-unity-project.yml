name: Unity Build, Release, and Publish Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (for manual dispatch)'
        required: false
        default: ''
  push:
    tags:
      - 'v*.*.*'


jobs:
  build-plugin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compile C++ code
        working-directory: Assets/Plugins/TrafficSimulation
        run: |
          # Install pybind11 using Homebrew
          brew install pybind11
          # Get the pybind11 CMake directory
          export PYBIND11_CMAKE_DIR=$(brew --prefix pybind11)/lib/cmake/pybind11
          # Create build directory and compile
          mkdir build
          cd build
          cmake .. -Dpybind11_DIR=$PYBIND11_CMAKE_DIR
          make
          cd ..

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: Assets/Plugins/TrafficSimulation/build


  build-unity:
    needs: build-plugin
    runs-on: macos-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is important to fetch all history for all tags and branches
          lfs: true

      - name: Cache Library files from previous builds
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-UnityDriveSimulation-StandaloneOSX
          restore-keys: |
            Library-UnityDriveSimulation-
            Library-

      - name: Determine version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.version }}" ]; then
              VERSION=$(date +"%Y%m%d-%H%M%S")  # Fallback to timestamp if no version is provided
            else
              VERSION="${{ github.event.inputs.version }}"
            fi
          else
            VERSION=${GITHUB_REF#refs/tags/v}  # Extract version from tag
          fi
          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Download Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: Assets/Plugins/TrafficSimulation/build

      - name: Build Unity Project for macOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # Build a macOS standalone (Intel 64-bit).
          targetPlatform: StandaloneOSX
          # Use "auto" (default) to get from your ProjectSettings/ProjectVersion.txt
          unityVersion: auto
          versioning: Semantic
          # Enables caching the Unity Hub and Editor installation for MacOS runners (default: false).
          # This can significantly reduce project build times if you have enough available cache on Github Actions.
          cacheUnityInstallationOnMac: true
          buildName: libReplicantDriveSim
          #buildName: libReplicantDriveSim-${{ steps.slug.outputs.sha8 }}
          buildsPath: Builds
          # Format: EditorNamespace.BuilderClassName.StaticBuildMethod
          buildMethod: UnityBuilderAction.BuildScript.PerformMacOSBuild
          projectPath: .
          customParameters:  -buildTarget OSXArm64 -logFile "./Logs/unity_build.log" -development -debugCode
          androidExportType: "none"
          androidSymbolType: "none"

      - name: Create metadata file
        run: |
          echo "Version: ${{ steps.get_version.outputs.VERSION }}" > metadata.txt
          echo "Commit SHA: ${{ github.sha }}" >> metadata.txt
          echo "Short SHA: ${{ steps.slug.outputs.sha8 }}" >> metadata.txt

      - name: Package Builds with metadata
        run: |
          zip -r macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip ./Builds metadata.txt
          zip -r plugin-build-${{ steps.get_version.outputs.VERSION }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt
          #zip -r macos-unity-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Builds metadata.txt
          #zip -r plugin-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          body: |
            Release v${{ steps.get_version.outputs.VERSION }}
            Commit: ${{ github.sha }}
            Short SHA: ${{ steps.slug.outputs.sha8 }}
            ${{ steps.tag.outputs.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Plugin Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: plugin-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Unity Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Unity-Build-${{ steps.get_version.outputs.VERSION }}
          # Upload the entire Builds and Logs directories
          path: |
            ./Builds
            ./Logs


  build-and-push-image:
    needs: [build-unity]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-Unity-Build-${{ needs.build-unity.outputs.VERSION }}
          path: ./Builds

      # QEMU emulation, allows building images for different architectures 
      # even if the build machine itself is not of that architecture. 
      # This means you can build ARM64 images on an AMD64 machine and vice versa.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ needs.build-unity.outputs.VERSION }}
            ghcr.io/${{ github.repository }}:latest
