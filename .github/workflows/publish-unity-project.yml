# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

# Multi-platform image with GitHub Actions
name: Unity Build, Release, and Publish Package

on:
  release:
    types: [published]
  repository_dispatch:
    types: [trigger_docker_publish]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (for manual dispatch)'
        required: false
        default: ''
  push:
    tags:
      - 'v*.*.*'

env:
  # Use docker.io for Docker Hub
  REGISTRY: ghcr.io
  DOCKER_NAMESPACE: chrisjcc
  DOCKER_REPOSITORY: replicantdrivesim


jobs:
  build-plugin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pybind11
        run: pip install pybind11

      - name: Compile C++ code
        working-directory: Assets/Plugins/TrafficSimulation
        run: |
          # Create build directory and compile
          mkdir build && cd build
          cmake ..         
          make
      
      - name: Archive Plugin Files
        run: |
          tar -cvhf ./TrafficSimulation-Plugin.tar -C Assets/Plugins/TrafficSimulation/build .

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: ./TrafficSimulation-Plugin.tar
          include-hidden-files: true
          if-no-files-found: warn


  build-unity:
    needs: build-plugin
    runs-on: macos-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is important to fetch all history for all tags and branches
          lfs: true

      - name: Cache Library files from previous builds
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-UnityDriveSimulation-StandaloneOSX
          restore-keys: |
            Library-UnityDriveSimulation-
            Library-
          #path: /tmp/.buildx-cache
          #key: ${{ runner.os }}-buildx-${{ github.ref }}-${{ github.sha }}
          #restore-keys: |
          #  ${{ runner.os }}-buildx-${{ github.ref }}-
          #  ${{ runner.os }}-buildx-

      - name: Determine version
        id: get_version
        run: |
          if [[ ${{ github.event_name }} == 'release' ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              VERSION="${{ github.event.inputs.version }}"
            else
              VERSION=$(date +"%Y%m%d-%H%M%S")  # Fallback to timestamp if no version is provided
            fi
          elif [[ ${{ github.ref }} == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ ${{ github.event_name }} == 'pull_request' ]]; then
            VERSION="pr-${{ github.event.pull_request.number }}"
          else
            VERSION=$(git rev-parse --short HEAD)  # Use short commit hash for other cases
          fi
          echo "Using version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Get short SHA
        id: slug
        run: echo "sha8=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Download Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: ./TrafficSimulation-Plugin.tar

      - name: Extract Plugin Files
        run: |
          # Create build directory
          mkdir -p Assets/Plugins/TrafficSimulation/build/
          # Extract the file
          tar -xvf ./TrafficSimulation-Plugin.tar/TrafficSimulation-Plugin.tar -C Assets/Plugins/TrafficSimulation/build
          # Remove tar archive
          rm -rf ./TrafficSimulation-Plugin.tar

      - name: Build Unity Project for macOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # Build a macOS standalone (Intel 64-bit).
          targetPlatform: StandaloneOSX # Build a macOS standalone.
          # Use "auto" (default) to get from your ProjectSettings/ProjectVersion.txt
          unityVersion: auto
          versioning: Semantic
          # Enables caching the Unity Hub and Editor installation for MacOS runners (default: false).
          # This can significantly reduce project build times if you have enough available cache on Github Actions.
          cacheUnityInstallationOnMac: true
          buildName: libReplicantDriveSim-${{ steps.slug.outputs.sha8 }}
          buildsPath: Builds
          # Format: EditorNamespace.BuilderClassName.StaticBuildMethod
          buildMethod: UnityBuilderAction.BuildScript.PerformMacOSBuild
          projectPath: .
          customParameters:  '-buildTarget OSXArm64 -logFile "./Logs/unity_build.log" -development -debugCode'
          androidExportType: "none"
          androidSymbolType: "none"

      - name: Create metadata file
        run: |
          echo "Version: ${{ steps.get_version.outputs.VERSION }}" > metadata.txt
          echo "Commit SHA: ${{ github.sha }}" >> metadata.txt
          echo "Short SHA: ${{ steps.slug.outputs.sha8 }}" >> metadata.txt

      - name: Package Builds with metadata
        run: |
          zip -r macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip ./Builds ./Logs metadata.txt
          zip -r plugin-build-${{ steps.get_version.outputs.VERSION }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt
          #zip -r macos-unity-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Builds metadata.txt
          #zip -r plugin-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            Release ${{ steps.get_version.outputs.VERSION }}
            Commit: ${{ github.sha }}
            Short SHA: ${{ steps.slug.outputs.sha8 }}
            ${{ steps.tag.outputs.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Plugin Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: plugin-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Unity Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Unity-Build-${{ steps.get_version.outputs.VERSION }}
          # Upload the entire Builds and Logs directories
          path: macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          #path: |
          #  ./Builds
          #  ./Logs


  build-and-push-image:
    needs: [build-unity]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Lowercase the repo name
        run: |
          echo "REPO_LOWER=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_REPOSITORY }}
          tags: |
            type=raw,value=${{ needs.build-unity.outputs.VERSION }}
            type=raw,value=latest,enable={{is_default_branch}} 
    
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-Unity-Build-${{ needs.build-unity.outputs.VERSION }}
          path: ./

      - name: Extract Unity Build Artifact
        run: |
          unzip macos-unity-build-${{ needs.build-unity.outputs.VERSION }}.zip
          rm macos-unity-build-${{ needs.build-unity.outputs.VERSION }}.zip
    
      # QEMU emulation, allows building images for different architectures 
      # even if the build machine itself is not of that architecture. 
      # This means you can build ARM64 images on an AMD64 machine and vice versa.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to Docker Hub Registry
        id: docker_push_and_build
        uses: docker/build-push-action@v6
        env: 
          DOCKER_BUILD_SUMMARY: true
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          # Support single multi-architecture Docker image 
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true  # Set to true disable caching

      - name: Build and push Docker image to GitHub Container Registry
        id: gh_push_and_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          # Support single multi-architecture Docker image 
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:${{ needs.build-unity.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.REPO_LOWER }}:latest

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_REPOSITORY }}:${{ steps.meta.outputs.version }}


  build-and-publish-pypi:
    needs: build-and-push-image
    runs-on: macos-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4    

      - name: Download Unity Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-Unity-Build-${{ needs.build-unity.outputs.VERSION }}
          path: ./replicantdrivesim

      - name: Extract Unity Build Artifact
        run: |
          unzip replicantdrivesim/macos-unity-build-${{ needs.build-unity.outputs.VERSION }}.zip
          rm replicantdrivesim/macos-unity-build-${{ needs.build-unity.outputs.VERSION }}.zip

      - name: Move build directory to replicantdrivesim
        run: |
          # Copy and rename binary executable 
          cp Assets/Plugins/TrafficSimulation/build/replicantdrivesim_pypi.so replicantdrivesim/replicantdrivesim.so

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
  
      - name: Install dependencies
        run: pip install --upgrade setuptools wheel twine pybind11
  
      - name: Build Python package
        run: |
          # Build the Python wheel and source distribution
          python setup.py sdist bdist_wheel
    
      - name: Upload to PyPI to publish Python package
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          # Upload the package to PyPI
          twine upload dist/*
  
      - name: Verify PyPi package installation
        run: |
          pip install ReplicantDriveSim==0.2.1
          pip show ReplicantDriveSim
