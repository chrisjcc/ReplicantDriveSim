name: Unity Build and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'


jobs:
  build-plugin:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compile C++ code
        working-directory: Assets/Plugins/TrafficSimulation
        run: |
          # Install pybind11 using Homebrew
          brew install pybind11
          # Get the pybind11 CMake directory
          export PYBIND11_CMAKE_DIR=$(brew --prefix pybind11)/lib/cmake/pybind11
          # Create build directory and compile
          mkdir build
          cd build
          cmake .. -Dpybind11_DIR=$PYBIND11_CMAKE_DIR
          make
          cd ..

      - name: Upload Plugin Artifact
        uses: actions/upload-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: Assets/Plugins/TrafficSimulation/build


  build-unity:
    needs: build-plugin
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0  # This is important to fetch all history for all tags and branches

      - name: Get tag message
        id: tag
        run: |
          TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
          echo "::set-output name=message::$TAG_MESSAGE"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

      - name: Download Plugin Artifact
        uses: actions/download-artifact@v4
        with:
          name: TrafficSimulation-Plugin
          path: Assets/Plugins/TrafficSimulation/build

      - name: Build Unity Project for macOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneOSX
          buildName: libReplicantDriveSim
          buildsPath: Builds
          buildMethod: UnityDriveSimulation.BuildScript.PerformMacOSBuild
          customParameters: -logFile "Logs/unity_build.log" -development -debugCode

      - name: Get short SHA
        id: slug
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Create metadata file
        run: |
          echo "Version: ${{ steps.get_version.outputs.VERSION }}" > metadata.txt
          echo "Commit SHA: ${{ github.sha }}" >> metadata.txt

      - name: Package Builds with metadata
        run: |
          zip -r macos-unity-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Builds metadata.txt
          zip -r plugin-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.slug.outputs.sha8 }}.zip ./Assets/Plugins/TrafficSimulation/build metadata.txt

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # If tag v1.0.0 is pushed (refs/tags/v1.0.0)
          tag_name: ${{ github.ref }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}_SHA_${{ github.sha }}
          body: |
            Release v${{ steps.get_version.outputs.VERSION }}
            Commit: ${{ github.sha }}
            ${{ steps.tag.outputs.message }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: macos-unity-build-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Plugin Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: plugin-build-${{ steps.get_version.outputs.VERSION }}-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Upload Unity Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-Unity-Build-${{ steps.get_version.outputs.VERSION }}
          # Upload the entire Builds and Logs directories
          path: |
            ./Builds
            ./Logs
